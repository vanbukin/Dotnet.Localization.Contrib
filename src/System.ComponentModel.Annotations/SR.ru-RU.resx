<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentIsNullOrWhitespace" xml:space="preserve">
    <value>Аргумент '{0}' не может быть пустым, иметь значение NULL или содержать только пробелы.</value>
  </data>
  <data name="AttributeStore_Unknown_Property" xml:space="preserve">
    <value>В типе '{0}' не содержится общее свойство с именем '{1}'.</value>
  </data>
  <data name="Common_PropertyNotFound" xml:space="preserve">
    <value>Не удалось найти свойство {0}.{1}.</value>
  </data>
  <data name="CompareAttribute_MustMatch" xml:space="preserve">
    <value>{0} и '{1}' не совпадают.</value>
  </data>
  <data name="CompareAttribute_UnknownProperty" xml:space="preserve">
    <value>Не удалось найти свойство с именем {0}.</value>
  </data>
  <data name="CreditCardAttribute_Invalid" xml:space="preserve">
    <value>Поле {0} не содержит допустимый номер кредитной карты.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Must_Return_ValidationResult" xml:space="preserve">
    <value>Метод CustomValidationAttribute '{0}' типа '{1}' должен возвращать System.ComponentModel.DataAnnotations.ValidationResult.  Чтобы указать успешное выполнение, используйте System.ComponentModel.DataAnnotations.ValidationResult.Success.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Not_Found" xml:space="preserve">
    <value>Метод CustomValidationAttribute '{0}' отсутствует в типе '{1}', или не является открытым и статическим.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Required" xml:space="preserve">
    <value>Не задано CustomValidationAttribute.Method.</value>
  </data>
  <data name="CustomValidationAttribute_Method_Signature" xml:space="preserve">
    <value>Метод CustomValidationAttribute '{0}' типа '{1}' должен отвечать ожидаемой сигнатуре: public static ValidationResult {0}(object value, ValidationContext context). Значение может иметь строгий тип. Параметр ValidationContext необязателен.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Conversion_Failed" xml:space="preserve">
    <value>Не удается преобразовать значение типа '{0}' в тип '{1}', требуемый методом {2}.{3}.</value>
  </data>
  <data name="CustomValidationAttribute_Type_Must_Be_Public" xml:space="preserve">
    <value>Тип настраиваемой проверки '{0}' должен быть общедоступным.</value>
  </data>
  <data name="CustomValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} является недопустимым.</value>
  </data>
  <data name="CustomValidationAttribute_ValidatorType_Required" xml:space="preserve">
    <value>Не задано значение CustomValidationAttribute.ValidatorType.</value>
  </data>
  <data name="DataTypeAttribute_EmptyDataTypeString" xml:space="preserve">
    <value>Настраиваемая строка DataType не может иметь значение NULL или быть пустой.</value>
  </data>
  <data name="DisplayAttribute_PropertyNotSet" xml:space="preserve">
    <value>Свойство {0} не было задано. Для получения значения используйте метод {1}.</value>
  </data>
  <data name="EmailAddressAttribute_Invalid" xml:space="preserve">
    <value>Поле {0} не содержит допустимый адрес электронной почты.</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeCannotBeNull" xml:space="preserve">
    <value>Тип, предоставленный для EnumDataTypeAttribute не может быть неопределенным (null).</value>
  </data>
  <data name="EnumDataTypeAttribute_TypeNeedsToBeAnEnum" xml:space="preserve">
    <value>Тип '{0}' должен быть типом перечисления.</value>
  </data>
  <data name="FileExtensionsAttribute_Invalid" xml:space="preserve">
    <value>Поле {0} принимает только файлы со следующими расширениями: {1}</value>
  </data>
  <data name="LengthAttribute_InvalidValueType" xml:space="preserve">
    <value>Поле типа {0} должно быть строкой, массивом, либо реализовывать интерфейс ICollection.</value>
  </data>
  <data name="LocalizableString_LocalizationFailed" xml:space="preserve">
    <value>Не удается получить свойство '{0}' из-за ошибки локализации. Тип '{1}' не является общим или не содержит свойство типа public static string с именем '{2}'.</value>
  </data>
  <data name="MaxLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>Атрибут MaxLengthAttribute должен иметь значение Length, большее нуля. Указать, что строка или массив может иметь максимально допустимую длину, можно с помощью атрибута MaxLength() без параметров.</value>
  </data>
  <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>Поле {0} должно иметь тип строки или массива с максимальной длиной '{1}'.</value>
  </data>
  <data name="MinLengthAttribute_InvalidMinLength" xml:space="preserve">
    <value>Атрибут MinLengthAttribute должен иметь значение Length, большее нуля или равное ему.</value>
  </data>
  <data name="MinLengthAttribute_ValidationError" xml:space="preserve">
    <value>Поле {0} должно иметь тип строки или массива с минимальной длиной '{1}'.</value>
  </data>
  <data name="PhoneAttribute_Invalid" xml:space="preserve">
    <value>Поле {0} не содержит допустимый номер телефона.</value>
  </data>
  <data name="RangeAttribute_ArbitraryTypeNotIComparable" xml:space="preserve">
    <value>Тип {0} должен реализовывать {1}.</value>
  </data>
  <data name="RangeAttribute_MinGreaterThanMax" xml:space="preserve">
    <value>Максимальное значение '{0}' должно быть больше или равно минимальному значению '{1}'.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Min_And_Max" xml:space="preserve">
    <value>Необходимо задать минимальные и максимальные значения.</value>
  </data>
  <data name="RangeAttribute_Must_Set_Operand_Type" xml:space="preserve">
    <value>Необходимо задать OperandType, когда строки используются для минимальных и максимальных значений.</value>
  </data>
  <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>Поле {0} должно иметь значение между {1} и {2}.</value>
  </data>
  <data name="RegexAttribute_ValidationError" xml:space="preserve">
    <value>Поле {0} должно соответствовать регулярному выражению '{1}'.</value>
  </data>
  <data name="RegularExpressionAttribute_Empty_Pattern" xml:space="preserve">
    <value>Шаблон должен быть задан в виде допустимого регулярного выражения.</value>
  </data>
  <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>Требуется поле {0}.</value>
  </data>
  <data name="StringLengthAttribute_InvalidMaxLength" xml:space="preserve">
    <value>Максимальная длина должна быть неотрицательным целым числом.</value>
  </data>
  <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>Поле {0} должно иметь строковое значение, максимальная длина которого — {1}.</value>
  </data>
  <data name="StringLengthAttribute_ValidationErrorIncludingMinimum" xml:space="preserve">
    <value>Поле {0} должно быть строкой с минимальной длиной {2} и максимальной {1}.</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyIsNotAString" xml:space="preserve">
    <value>Ключевой параметр в позиции {0} со значением '{1}' не является строкой. Каждый ключевой параметр управления должен быть строкой.</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyIsNull" xml:space="preserve">
    <value>Ключевой параметр в позиции {0} равен null. Каждый ключевой параметр управления должен быть строкой.</value>
  </data>
  <data name="UIHintImplementation_ControlParameterKeyOccursMoreThanOnce" xml:space="preserve">
    <value>Ключевой параметр в позиции {0} со значением '{1}' встречается больше одного раза.</value>
  </data>
  <data name="UIHintImplementation_NeedEvenNumberOfControlParameters" xml:space="preserve">
    <value>Количество параметров управления должно быть четным.</value>
  </data>
  <data name="UrlAttribute_Invalid" xml:space="preserve">
    <value>Поле {0} не содержит допустимый полный URL-адрес http, https или ftp.</value>
  </data>
  <data name="ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource" xml:space="preserve">
    <value>Должно быть задано либо свойство ErrorMessageString, либо ErrorMessageResourceName, но не оба.</value>
  </data>
  <data name="ValidationAttribute_IsValid_NotImplemented" xml:space="preserve">
    <value>Метод IsValid(object value) не реализуется данным классом. Предпочтительная точка вхождения - GetValidationResult(), а в классах должен переопределяться IsValid(object value, ValidationContext context).</value>
  </data>
  <data name="ValidationAttribute_NeedBothResourceTypeAndResourceName" xml:space="preserve">
    <value>В этом атрибуте необходимо задать ErrorMessageResourceType и ErrorMessageResourceName.</value>
  </data>
  <data name="ValidationAttribute_ResourcePropertyNotStringType" xml:space="preserve">
    <value>Свойство '{0}' в типе ресурса '{1}' не является строковым типом.</value>
  </data>
  <data name="ValidationAttribute_ResourceTypeDoesNotHaveProperty" xml:space="preserve">
    <value>Доступное статическое свойство '{1}' отсутствует в типе ресурса '{0}'.</value>
  </data>
  <data name="ValidationAttribute_ValidationError" xml:space="preserve">
    <value>Недопустимое поле {0}.</value>
  </data>
  <data name="Validator_InstanceMustMatchValidationContextInstance" xml:space="preserve">
    <value>Предоставленный экземпляр должен соответствовать ObjectInstance в предоставленном ValidationContext.</value>
  </data>
  <data name="Validator_Property_Value_Wrong_Type" xml:space="preserve">
    <value>Значение свойства '{0}' должно иметь тип '{1}'.</value>
  </data>
</root>